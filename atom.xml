<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jack Chen</title>
  
  <subtitle>Personal life record</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://850075610.github.io/"/>
  <updated>2020-07-13T14:57:31.491Z</updated>
  <id>https://850075610.github.io/</id>
  
  <author>
    <name>Jack Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to Extract Text From a PDF File and Write to a Word File Using Python?</title>
    <link href="https://850075610.github.io/2020/07/13/How-to-extract-text-from-a-PDF-file/"/>
    <id>https://850075610.github.io/2020/07/13/How-to-extract-text-from-a-PDF-file/</id>
    <published>2020-07-13T14:36:52.000Z</published>
    <updated>2020-07-13T14:57:31.491Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Requirement-description"><a href="#Requirement-description" class="headerlink" title="Requirement description"></a>Requirement description</h1><p>You’ve got a pdf file and want to extract only the text out without images and write the extracted text to a word file, there can be at least two choices:</p><ol><li>select all, copy and paste</li><li>Using python</li></ol><p>So let’s talk about the 2nd. scenario. We are going to use 2 libraries: PyPDF2 and docx, be aware that they’re case sensitive, can be installed using</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install (corresponding library)</span><br></pre></td></tr></table></figure><p>After installation, we can start:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PyPDF2</span><br><span class="line"><span class="keyword">import</span> docx</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    pdfFileObj = open(<span class="string">'Cap8.pdf'</span>, <span class="string">'rb'</span>)</span><br><span class="line">    doc = docx.Document()</span><br><span class="line">    pdfReader = PyPDF2.PdfFileReader(pdfFileObj)</span><br><span class="line">    pages = pdfReader.numPages</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> range(pages):</span><br><span class="line">        pageObj = pdfReader.getPage(p)</span><br><span class="line">        txt = pageObj.extractText()</span><br><span class="line">        print(txt)</span><br><span class="line">        <span class="comment"># Here you can do some extra work like using regex to filter the text results you wanted</span></span><br><span class="line">        <span class="comment"># print(pageObj.extractText())</span></span><br><span class="line">        doc.add_paragraph(pageObj.extractText())</span><br><span class="line">    doc.save(<span class="string">'Cap8.docx'</span>)</span><br><span class="line">    print(<span class="string">f"Save to word finished."</span>)</span><br></pre></td></tr></table></figure><p>Now time for you to have a try!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Requirement-description&quot;&gt;&lt;a href=&quot;#Requirement-description&quot; class=&quot;headerlink&quot; title=&quot;Requirement description&quot;&gt;&lt;/a&gt;Requirement descr
      
    
    </summary>
    
    
      <category term="operation text in PDF and word python" scheme="https://850075610.github.io/tags/operation-text-in-PDF-and-word-python/"/>
    
  </entry>
  
  <entry>
    <title>Eliminate Line Number of Code Copied From Website Using Regex</title>
    <link href="https://850075610.github.io/2020/07/07/Eliminate-line-number-of-code-copied-from-website-using-regex/"/>
    <id>https://850075610.github.io/2020/07/07/Eliminate-line-number-of-code-copied-from-website-using-regex/</id>
    <published>2020-07-07T11:03:00.000Z</published>
    <updated>2020-07-07T11:57:38.942Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h1><p>A problem you will encouter is that when you are reading a post from the website like <a href="https://www.oracle.com/technical-resources/articles/java/serializationapi.html" target="_blank" rel="noopener">serializationapi tutorial from oracle</a> and want to run the code in your IDE, e.g. eclipse, after pasting you will find the copied code contains line number which is annoying and you don’t have to delete them manually, which is time wasting. Now it’s time for regex.</p><p>So usually the line number can be in the form of: at least 1 digit.</p><p>As for the number in aforementioned post, the line numbers are like: at least 2 digits (with 0 at the end), so what does the corresponding regex look like?</p><p>^(?=(.*\d){2})[0-9]{2,}</p><p>^(?=(.*\d){2}) - uses lookahead (?=) and says the string must contain at least 2 digits<br>[0-9] - dictates the allowed characters, only digits in our scenario<br>{2,} - says the matching string must be at least 2 characters long</p><p>So time for you to have a try.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h2><p><a href="https://cheatography.com/davechild/cheat-sheets/regular-expressions/" target="_blank" rel="noopener">cheat sheet for regex</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description&quot;&gt;&lt;/a&gt;Problem Description&lt;/h1&gt;&lt;p&gt;A 
      
    
    </summary>
    
      <category term="regex" scheme="https://850075610.github.io/categories/regex/"/>
    
    
      <category term="regex" scheme="https://850075610.github.io/tags/regex/"/>
    
  </entry>
  
  <entry>
    <title>Change File Extension Using Python</title>
    <link href="https://850075610.github.io/2020/03/20/change-file-extension-using-python/"/>
    <id>https://850075610.github.io/2020/03/20/change-file-extension-using-python/</id>
    <published>2020-03-20T09:52:57.000Z</published>
    <updated>2020-03-20T10:37:36.323Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-实现批量更改文件扩展名"><a href="#Python-实现批量更改文件扩展名" class="headerlink" title="Python 实现批量更改文件扩展名"></a>Python 实现批量更改文件扩展名</h1><h2 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h2><p>昨晚为了腾手机空间，就把手机上的照片都导出到了 <strong>win10</strong> 系统，但不知道出了什么 bug, 一些照片的文件扩展名没有了，这样显示的缩略图就不正确了，我尝试手动添加了 2 个，然后显示就一切正常了，但得有好几十张照片都没有扩展名，于是 “<strong><em>人生苦短，我用 python</em></strong>”，代码如下（已在 <em>win10, python3</em> 下测试过）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> ntpath</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> listdir</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> isfile, join</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rename_file</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> path.endswith(<span class="string">'.jpg'</span>) <span class="keyword">and</span> <span class="keyword">not</span> path.endswith(<span class="string">'jpeg'</span>) <span class="keyword">and</span> <span class="keyword">not</span> path.endswith(<span class="string">'.py'</span>):</span><br><span class="line">        print(<span class="string">f"original name = <span class="subst">&#123;path&#125;</span>"</span>)</span><br><span class="line">        new_name = path + <span class="string">'.jpg'</span></span><br><span class="line">        print(<span class="string">f"new name = <span class="subst">&#123;new_name&#125;</span>"</span>)</span><br><span class="line">        os.rename(path, new_name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># get path</span></span><br><span class="line">    dir_path = os.path.dirname(os.path.realpath(__file__))</span><br><span class="line">    <span class="comment"># print(rename_file(dir_path))</span></span><br><span class="line">    <span class="comment"># get all files in the path</span></span><br><span class="line">    onlyfiles = [f <span class="keyword">for</span> f <span class="keyword">in</span> listdir(dir_path) <span class="keyword">if</span> isfile(join(dir_path, f))]</span><br><span class="line">    <span class="comment"># print(onlyfiles)</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> onlyfiles:</span><br><span class="line">        <span class="comment"># print(file)</span></span><br><span class="line">        rename_file(file)</span><br></pre></td></tr></table></figure><p>Now time for you to have a try!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python-实现批量更改文件扩展名&quot;&gt;&lt;a href=&quot;#Python-实现批量更改文件扩展名&quot; class=&quot;headerlink&quot; title=&quot;Python 实现批量更改文件扩展名&quot;&gt;&lt;/a&gt;Python 实现批量更改文件扩展名&lt;/h1&gt;&lt;h2 id=&quot;需
      
    
    </summary>
    
    
      <category term="python, tool" scheme="https://850075610.github.io/tags/python-tool/"/>
    
  </entry>
  
  <entry>
    <title>Operator Overloading</title>
    <link href="https://850075610.github.io/2019/11/09/Operator-overloading/"/>
    <id>https://850075610.github.io/2019/11/09/Operator-overloading/</id>
    <published>2019-11-09T15:00:22.000Z</published>
    <updated>2019-11-09T15:18:00.955Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是运算符重载？"><a href="#什么是运算符重载？" class="headerlink" title="什么是运算符重载？"></a>什么是运算符重载？</h1><p>直接上例子给个对比：<br>运行这段 Python 代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""docstring for Test"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        super(Test, self).__init__()</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># def __str__(self):</span></span><br><span class="line">    <span class="comment">#     return str(len(self.name))</span></span><br><span class="line"></span><br><span class="line">me = Test(<span class="string">'sharer'</span>)</span><br><span class="line">print(str(me))</span><br></pre></td></tr></table></figure><p>输出结果应该是类似于：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;__main__.Test object <span class="built_in">at</span> <span class="number">0</span>x7f30b98a4450&gt;</span><br></pre></td></tr></table></figure><p>去掉注释再运行，结果应该是：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><p>注释部分代码就是运算符重载的一个例子，重载了__str__() in python, 重载为打印 object 的 ‘name’(参数)的长度，可以理解为重新定义了__str__() 方法。</p><p>参考链接：</p><p><a href="https://www.quora.com/What-is-the-use-of-__str__-in-python" target="_blank" rel="noopener">What is the use of <strong>str</strong>() in python?</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是运算符重载？&quot;&gt;&lt;a href=&quot;#什么是运算符重载？&quot; class=&quot;headerlink&quot; title=&quot;什么是运算符重载？&quot;&gt;&lt;/a&gt;什么是运算符重载？&lt;/h1&gt;&lt;p&gt;直接上例子给个对比：&lt;br&gt;运行这段 Python 代码：&lt;/p&gt;
&lt;figure 
      
    
    </summary>
    
      <category term="programming" scheme="https://850075610.github.io/categories/programming/"/>
    
    
      <category term="Operator overloading" scheme="https://850075610.github.io/tags/Operator-overloading/"/>
    
  </entry>
  
  <entry>
    <title>Brief Introduction to Git</title>
    <link href="https://850075610.github.io/2019/10/05/introduction-to-git/"/>
    <id>https://850075610.github.io/2019/10/05/introduction-to-git/</id>
    <published>2019-10-05T20:46:09.000Z</published>
    <updated>2019-10-10T18:01:19.519Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是-Git？"><a href="#什么是-Git？" class="headerlink" title="什么是 Git？"></a>什么是 Git？</h1><p><a href="https://www.git-scm.com/" target="_blank" rel="noopener">Git</a> 是一个免费和开源的分布式版本控制系统。</p><h1 id="为什么要用-Git-以及什么情况下用-Git"><a href="#为什么要用-Git-以及什么情况下用-Git" class="headerlink" title="为什么要用 Git 以及什么情况下用 Git?"></a>为什么要用 Git 以及什么情况下用 Git?</h1><p>Git 的存在给团队开发提供了协同合作的可能性，哪怕是2个人的小团队之间的代码协同。</p><h1 id="我也经常听说-GitHub-它与-Git-之间是什么关系呢？"><a href="#我也经常听说-GitHub-它与-Git-之间是什么关系呢？" class="headerlink" title="我也经常听说 GitHub, 它与 Git 之间是什么关系呢？"></a>我也经常听说 GitHub, 它与 Git 之间是什么关系呢？</h1><p><a href="https://github.com" target="_blank" rel="noopener">GitHub</a> 号称世界领先软件开发平台，经常被戏称为“大型同性交友平台/社区”，本质上是一个代码仓库，与其功能类似还有比如 <a href="https://gitbucket.github.io/" target="_blank" rel="noopener">GitBucket</a> 和 <a href="https://about.gitlab.com/" target="_blank" rel="noopener">GitLab</a> 等。</p><h1 id="初识-Git-基本命令"><a href="#初识-Git-基本命令" class="headerlink" title="初识 Git 基本命令"></a>初识 Git 基本命令</h1><p>PS： 笔者运行环境是 <a href="https://ubuntu.com/" target="_blank" rel="noopener">Ubuntu</a> 18.04, 系统语言是英文， Git 是支持 linux, windows 和 macOS 的，具体操作差异请按需 google, 以下例子全部基于 Ubuntu 18.04.</p><h2 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h2><p>当我们访问 <a href="https://github.com" target="_blank" rel="noopener">GitHub</a> 网站首页的时候，总会有”Start a project”的选项，当我们点进去，按照指示就在 <b>GitHub</b> 上创建完成了一个远程代码仓库, 这时这个代码仓库和 GitHub 上已有的代码仓库没啥太大区别，只不过内容暂时基本为空，右侧有一个绿色的“Clone or download” 的按钮，一般选择”Clone with SSH”, 前提你的SSH 已经配置完毕，如果没有请 google. 复制以后，在本地选一个路径，启动命令行, 输入命令：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone 代码仓库地址</span><br></pre></td></tr></table></figure><p>代码仓库地址一般为：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">git@github.com:代码仓库所属用户名/代码仓库名.<span class="title">git</span></span></span><br></pre></td></tr></table></figure><p>执行完上面的命令以后就在本地有了该代码仓库的本地副本。</p><h2 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h2><p>进入任何一个文件夹，执行：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure><p>都会得到一些类似</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">On branch ...</span><br><span class="line">Your branch is up to <span class="built_in">date</span> with 'origin/...'.</span><br><span class="line"></span><br><span class="line">Changes <span class="keyword">not</span> staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use "git add &lt;file&gt;..." to update what will be committed)</span><br><span class="line">  (use "git checkout -- &lt;file&gt;..." to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">  (commit or discard the untracked or modified content <span class="keyword">in</span> submodules)</span><br><span class="line"></span><br><span class="line"><span class="function">modified:   ... (<span class="title">modified</span> <span class="title">content</span>, <span class="title">untracked</span> <span class="title">content</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">no</span> <span class="title">changes</span> <span class="title">added</span> <span class="title">to</span> <span class="title">commit</span> (<span class="title">use</span> "<span class="title">git</span> <span class="title">add</span>" <span class="title">and</span>/<span class="title">or</span> "<span class="title">git</span> <span class="title">commit</span> -<span class="title">a</span>")</span></span><br></pre></td></tr></table></figure><p>类似的提示，告诉你当前在哪个分支上，本地做了哪些更改没有提交之类的。</p><h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a><a href="https://git-scm.com/docs/git-pull" target="_blank" rel="noopener">git pull</a></h2><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull</span><br></pre></td></tr></table></figure><blockquote><p>Incorporates changes from a remote repository into the current branch</p></blockquote><p>这个命令把远程仓库的改变整合到你本地现有分支中，一般会有类似的结果：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">remote: <span class="title">Enumerating</span> <span class="title">objects</span>: 19, <span class="title">done</span>.</span></span><br><span class="line"><span class="function"><span class="title">remote</span>: <span class="title">Counting</span> <span class="title">objects</span>: 100% (19/19), <span class="title">done</span>.</span></span><br><span class="line"><span class="function"><span class="title">remote</span>: <span class="title">Compressing</span> <span class="title">objects</span>: 100% (19/19), <span class="title">done</span>.</span></span><br><span class="line"><span class="function"><span class="title">remote</span>: <span class="title">Total</span> 19 (<span class="title">delta</span> 11), <span class="title">reused</span> 0 (<span class="title">delta</span> 0)</span></span><br><span class="line"><span class="function"><span class="title">Unpacking</span> <span class="title">objects</span>: 100% (19/19), <span class="title">done</span>.</span></span><br><span class="line"><span class="function"><span class="title">From</span> <span class="title">gitlab.hrz</span>....</span></span><br><span class="line"><span class="function">   8<span class="title">a88a50e0</span>..9401<span class="title">d7374</span>  <span class="title">branch</span>-<span class="title">name</span> -&gt; <span class="title">origin</span>/<span class="title">branch</span>-<span class="title">name</span></span></span><br><span class="line"><span class="function">   9<span class="title">b43df51f</span>..66234<span class="title">ea05</span>  <span class="title">branch</span>-<span class="title">name1</span>    -&gt; <span class="title">origin</span>/<span class="title">branch</span>-<span class="title">name1</span></span></span><br><span class="line"><span class="function"><span class="title">Already</span> <span class="title">up</span> <span class="title">to</span> <span class="title">date</span>.</span></span><br></pre></td></tr></table></figure><p>当再次执行</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull</span><br></pre></td></tr></table></figure><p>就会得到</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Already up to <span class="built_in">date</span>.</span><br></pre></td></tr></table></figure><p>此时就可以开始你的开发工作了，请确保每次更改代码前都执行过</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull</span><br></pre></td></tr></table></figure><p>命令，否则之后就会有令人头疼的 conflict 之类的提示，稍后会提及如何简单粗暴解决 conflict 以继续开发。</p><h2 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h2><blockquote><p>This command adds a change in the working directory to the staging area. It tells Git that you want to include updates to a particular file in the next commit. However, git add doesn’t really affect the repository in any significant way—changes are not actually recorded until you run git commit.</p></blockquote><p><b>需要注意的是如果添加的是代码，请务必多次测试过，至少保证是可运行的。</b></p><h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a><a href="https://git-scm.com/docs/git-commit" target="_blank" rel="noopener">git commit</a></h2><p>常用用法：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m "the message to be shown <span class="keyword">for</span> this commit"</span><br></pre></td></tr></table></figure><blockquote><p>Create a new commit containing the current contents of the index and the given log message describing the changes. The new commit is a direct child of HEAD, usually the tip of the current branch, and the branch is updated to point to it (unless no branch is associated with the working tree, in which case HEAD is “detached” as described in git-checkout[1]).</p><p>The content to be committed can be specified in several ways:</p><ol><li><p>by using git-add[1] to incrementally “add” changes to the index before using the commit command (Note: even modified files must be “added”);</p></li><li><p>by using git-rm[1] to remove files from the working tree and the index, again before using the commit command;</p></li></ol></blockquote><p>git commit 执行之前一般要执行 git add 来添加文件或 git rm 来删除文件。</p><h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a><a href="https://git-scm.com/docs/git-push" target="_blank" rel="noopener">git push</a></h2><blockquote><p>Updates remote refs using local refs, while sending objects necessary to complete the given refs.</p></blockquote><p>执行完这个命令之后，刷新你远程的代码仓库按理说已经可以看到你最新的提交了，前提你有对于这个仓库的<a href="https://stackoverflow.com/questions/17442930/can-anybody-push-to-my-project-on-github" target="_blank" rel="noopener">代码提交权限</a>。</p><h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a><a href="https://stackoverflow.com/questions/1628088/reset-local-repository-branch-to-be-just-like-remote-repository-head" target="_blank" rel="noopener">git reset</a></h2><p>使用 git 的过程中一个潜在可能的需求是我想彻底放弃我本地对于代码的改变，因为我改的太乱了。。。这时这个命令就很有帮助了：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch origin</span><br><span class="line">$ git reset --hard origin/想同步的远程分支（例如，master）</span><br></pre></td></tr></table></figure><h2 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a><a href="https://git-scm.com/docs/git-checkout" target="_blank" rel="noopener">git checkout</a></h2><blockquote><p>git-checkout - Switch branches or restore working tree files</p></blockquote><p>对于 Switch branches： 切换到已有的另一个分支上去。</p><h2 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h2><p>List branches (the asterisk denotes the current branch).</p><h2 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a><a href="https://git-scm.com/docs/git-merge" target="_blank" rel="noopener">git merge</a></h2><blockquote><p>Incorporates changes from the named commits (since the time their histories diverged from the current branch) into the current branch.</p></blockquote><h1 id="git-的分支以及命名"><a href="#git-的分支以及命名" class="headerlink" title="git 的分支以及命名"></a>git 的分支以及命名</h1><p>分支和合理的命名都很重要，因为让太多的开发人员在一个分支上工作毫无科学而言。</p><p>当新建好一个远程代码仓库后会有一个 master 分支，也就是所谓的主分支，一般用来发布软件的稳定版本，由代码仓库拥有者/管理员来处理开发人员提交的 merge request.</p><p>development 分支也就是所谓的开发分支可以理解为 beta 版。</p><p>当现在有一个新的需求的时候也有必要开一个新的分支，可以命名为<b>feature/新特性对应的英文</b>, 举个例子：比如现在有一个项目是做三维图形的可视化，已经完成了柱状图的可视化，现在我们要扩展到折线图和饼图，这时候就有必要新开2个分支，当完成后再 merge 回开发分支。</p><h1 id="写在本篇最后"><a href="#写在本篇最后" class="headerlink" title="写在本篇最后"></a>写在本篇最后</h1><p>其实 Git 还有很多其他特性，例如 submodule, rebase 等，当有需要是按需去学习/google 就好，如果有任何疑问或建议都欢迎留言，由于知识水平有限，错误或不合适的地方在所难免，欢迎指正。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是-Git？&quot;&gt;&lt;a href=&quot;#什么是-Git？&quot; class=&quot;headerlink&quot; title=&quot;什么是 Git？&quot;&gt;&lt;/a&gt;什么是 Git？&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.git-scm.com/&quot; target=&quot;_bl
      
    
    </summary>
    
      <category term="tool" scheme="https://850075610.github.io/categories/tool/"/>
    
    
      <category term="Git" scheme="https://850075610.github.io/tags/Git/"/>
    
      <category term="introduction" scheme="https://850075610.github.io/tags/introduction/"/>
    
  </entry>
  
  <entry>
    <title>Hello World in C++</title>
    <link href="https://850075610.github.io/2019/02/14/Hello-world-in-c/"/>
    <id>https://850075610.github.io/2019/02/14/Hello-world-in-c/</id>
    <published>2019-02-14T15:25:14.000Z</published>
    <updated>2019-02-18T14:05:13.744Z</updated>
    
    <content type="html"><![CDATA[<p>When someone begins to learn a programming language, normally the first step they start with classical “Hello World!”. Let’s do it right now and start our c++ trip! By the way, c++ file extention can be either .cc or .cpp. In the following example we use .cpp extension.</p><p>‘helloworld.cpp’</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello World!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Explanation:</p><p>In order to use standard output stream cout, we need </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br></pre></td></tr></table></figure><p>Let’s ignore</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br></pre></td></tr></table></figure><p>for now.</p><p>If you’ve got any programming experience, the main() method is quite easy, as the entry of the program, it tells the program where it should start.</p><p>Now comes our task: <strong>print out “Hello World!”</strong></p><p>It was realized through <strong>standard output stream cout</strong>, as we metioned before.</p><p><strong>endl</strong> means ending this line and the cursor will change to the next line.</p><p><strong>Announcement: all programs are compiled and executed under ubuntu 18.04 for the moment.</strong></p><p>Compile command: </p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ g++ helloworld.cpp -o helloworld</span><br></pre></td></tr></table></figure><p><strong>-o</strong> parameter is for the name of the generated object file ( helloworld in the above command).</p><p>Run:</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./helloworld</span><br></pre></td></tr></table></figure><p><strong>Time to have a try by yourself right now!</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;When someone begins to learn a programming language, normally the first step they start with classical “Hello World!”. Let’s do it right 
      
    
    </summary>
    
      <category term="programming language" scheme="https://850075610.github.io/categories/programming-language/"/>
    
    
      <category term="helloworld" scheme="https://850075610.github.io/tags/helloworld/"/>
    
      <category term="c++" scheme="https://850075610.github.io/tags/c/"/>
    
  </entry>
  
</feed>
